# -*- coding: utf-8 -*-
"""app

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HqL77-STtqb0dQL9Hqt74Fp10ZgGC2yv
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import f1_score
from sklearn.metrics import classification_report, confusion_matrix
import warnings
import pickle
from scipy import stats
warnings.filterwarnings('ignore')
plt.style.use('fivethirtyeight')

data=pd.read_excel("/content/Data_Train.xlsx")
data.head()

data.Date_of_Journey=data.Date_of_Journey.str.split('/')

data.Date_of_Journey

data['Date']=data.Date_of_Journey.str[0]
data['Month']=data.Date_of_Journey.str[1]
data['Year']=data.Date_of_Journey.str[2]

data.Total_Stops.unique()

data.Route=data.Route.str.split('')
data.Route

data.Dep_Time=data.Dep_Time.str.split(':')

data.Arrival_Time=data.Arrival_Time.str.split(' ')

data.Duration=data.Duration.str.split(' ')

data['City1']=data.Route.str[0]
data['City2']=data.Route.str[1]
data['City3']=data.Route.str[2]
data['City4']=data.Route.str[3]
data['City5']=data.Route.str[4]
data['City6']=data.Route.str[5]

data.Dep_Time=data.Dep_Time.str.split(':')

data.Arrival_Time=data.Arrival_Time.str.split(' ')

data.Duration=data.Duration.str.split(' ')

data.info()

data.Total_Stops.replace('non_stop',0,inplace=True)
data.Total_Stops=data.Total_Stops.str.split(' ')
data.Total_Stops=data.Total_Stops

data.Additional_Info.unique()

data.Additional_Info.replace('No Info','No info',inplace=True)

data.isnull().sum()

data.drop(['City4','City5','City6'],axis=1,inplace=True)

data.isnull().sum()

data['City3'].fillna('None',inplace=True)

data['Date'].fillna(data['Date'],inplace=True)

data.info()

data.Date=data.Date.astype('int64')
data.Month=data.Month.astype('int64')
data.Year=data.Year.astype('int64')

data.drop(index=6474,inplace=True,axis=0)

categorical=['Airline','Source','Destination','Additional_Info','City1']
numerical=['Total_Stops','Date','Month','Year','Dep_Time_Hour','Dep_Time_Mins','Arrival_date','Arrival_Time_Hour','Arrival_Time_Mins','Travel_Hours','Travel_Mins']

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

data.head()

data.info()

data.head()

data.describe()

plt.figure(figsize=(15,8))
sns.distplot(data.Price)

sns.heatmap(data.corr(),annot=True)

import seaborn as sns
sns.boxplot(data['Price'])

y=data['Price']
x=data.drop(columns=['Price'],axis=1)

from sklearn.preprocessing import StandardScaler
ss=StandardScaler()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

x_train.head()

from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor,AdaBoostRegressor
rfr=RandomForestRegressor()
gb=GradientBoostingRegressor()
ad=AdaBoostRegressor()

from sklearn.model_selection import RandomizedSearchCV

param_grid={'n_estimators':[10,30,50,70,100],'max_depth':[None,1,2,3],'max_features':['auto','sqrt']}
rfr=RandomForestRegressor()
rf_res=RandomizedSearchCV(estimator=rfr,param_distributions=param_grid,cv=3,verbose=2,n_jobs=-1)

gb=GradientBoostingRegressor()
gb_res=RandomizedSearchCV(estimator=gb,param_distributions=param_grid,cv=3,verbose=2,n_jobs=-1)

rfr=RandomForestRegressor(n_estimators=10,max_features='sqrt',max_depth=None)

import pickle
pickle.dump(rfr,open('model1.pk1','wb'))

from flask import Flask,render_template,request
import numpy as np
import pickle

model = pickle.load(open(r"/content/model1.pk1",'rb'))

from flask import Flask, request, render_template 
import numpy as np 
import pandas as pd 
import pickle 
import os

model = pickle. load (open ('/content/model1.pk1', 'rb'))
app = Flask(__name__)

@app.route("/home")
def home():
  return render_template('home.html')

@app.route("/predict")
def home1():
  return render_template('predict.html')

@app.route("/pred", methods=['POST','GET'])
def predict():
  x=[[int(x) for x in request.form.values()]]
  print(x)

  x=np.array(x)
  print(x.sharp)

  print(x)
  pred=model.predict(x)
  print(pred)
  return render_template('submit.html',prediction_text=pred)

if __name__=="__main__":
  app.run(debug=False)